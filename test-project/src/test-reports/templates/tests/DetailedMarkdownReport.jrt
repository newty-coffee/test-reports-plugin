import org.newtco.test.reports.api.test.model.*;
<%
// Detailed markdown report template for JUnit test results
%>
## <i>Test Results - <%= title %></i>
<b><%= stats.total %></b> tests were completed in <b><%=Format.duration(stats.duration)%></b> with <b><%=stats.passed%></b><%=Icons.Passed%>passed, <b><%=stats.failed%></b><%=Icons.Failed%>failed, and <b><%=stats.skipped%></b><%=Icons.Skipped%>skipped.

---

<%
    for (var suite : suites) {
        repeat(suite.getTests(), test -> {
            if (test.getStatus() == Status.FAILED) {
                repeat(test.getFailures(), failure -> {
                    line()
                    .text(Icons.outcome(test), " <small>", suite.getDisplayName(), ".", "</small><b>", test.getDisplayName(), "</b>")
                    .sup(" <kbd>", Format.duration(test.getDuration()), "</kbd>")
                    .line()
                    .line("<blockquote>")
                    .line(Icons.Warning, " <b>", test.getClassName(), "</b>")
                    .line()
                    .code(failure.getMessage())
                    .eol();

                    if (failure instanceof AssertionFailure assertion) {
                        eol()
                        .line("<b>Expected:</b>")
                        .text(Icons.Expected).code(assertion.getExpected()).eol()
                        .line("<b>Actual:</b>")
                        .text(Icons.Actual).code(assertion.getActual()).eol();
                    }
                    else if (failure instanceof FileFailure file) {
                        eol()
                        .line("<b>Expected File:</b>")
                        .text(Icons.Expected).italic("Path: ").code(file.getExpectedPath()).eol()
                        .text(Icons.Expected).italic("Data: ").code(file.getExpected()).eol()
                        .line("<b>Actual File:</b>")
                        .text(Icons.Actual).italic("Path: ").code(file.getActualPath()).eol()
                        .text(Icons.Actual).italic("Data: ").code(file.getActual()).eol();
                    }

                    if (!test.getUrl().isEmpty()) {
                        int from = Math.max(0, failure.getLineNumber() - 1);
                        int to   = from + 2;
                        out(test.getUrl(), "#L", from, "-L", to)
                        .eol();
                    }

                    if (!failure.getStackTrace().isEmpty()) {
                        line()
                        .details("<i>Raw Output</i>", "<pre>", escapeHtml(failure.getStackTrace()), "</pre>");
                    }

                    line("</blockquote>");
                });
            }
            else {
                line()
                .text(Icons.outcome(test), " <small>", suite.getDisplayName(), ".", "</small><b>", test.getDisplayName(), "</b>")
                .sup(" <kbd>", Format.duration(test.getDuration()), "</kbd>")
                .line();
            }
        });
    }

    line()
    .sub("Generated by [Test Reports Plugin](https://github.com/newty-coffee/test-reports-plugin) for Gradle");
%>