import com.newtco.test.reports.api.test.model.*;
<%
// Detailed markdown report template for JUnit test results

// Detailed reports pass a single suite
var suite = getTestSuite();
%>
## <i>Test Results - <%= title %></i>
<b><%= stats.total %></b> tests were completed in <b><%=Format.duration(stats.duration)%></b> with <b><%=stats.passed%></b><%=Icons.Passed%>passing, <b><%=stats.failed%></b><%=Icons.Failed%>failed, and <b><%=stats.skipped%></b><%=Icons.Skipped%>skipped.

---

<%
    repeat(suite.getTests(), test -> {
        if (test.getStatus() == Status.FAILED) {
            repeat(test.getFailures(), failure -> {
                text(Icons.outcome(test), " <b>", test.getDisplayName(), "</b>")
                .sup("<kbd>", Format.duration(test.getDuration()), "</kbd>")
                .line()
                .line("<blockquote>")
                .line(Icons.Warning, " <b>", test.getClassName(), "</b>")
                .line()
                .code(escape(failure.getMessage()))
                .eol();

                if (failure instanceof AssertionFailure assertion) {
                    eol()
                    .line("<b>Expected:</b>")
                    .text(Icons.Expected).code(escape(assertion.getExpected())).eol()
                    .line("<b>Actual:</b>")
                    .text(Icons.Actual).code(escape(assertion.getActual())).eol();
                }
                else if (failure instanceof FileFailure file) {
                    eol()
                    .line("<b>Expected:</b>")
                    .text(Icons.Expected).code(escape(file.getExpected())).eol()
                    .line("<b>Actual:</b>")
                    .text(Icons.Actual).code(escape(file.getActual())).eol();
                }

                if (!test.getUrl().isEmpty()) {
                    int from = Math.max(0, failure.getLineNumber() - 1);
                    int to   = from + 2;
                    out(test.getUrl(), "#L", from, "-L", to)
                    .eol();
                }

                if (!failure.getStackTrace().isEmpty()) {
                    line()
                    .details("<i>Raw Output</i>", "<pre>", escapeHtml(failure.getStackTrace()), "</pre>");
                }

                line("</blockquote>")
                .br()
                .line();
            });
        }
        else {
            text(Icons.outcome(test), " ", test.getDisplayName(), " ")
            .sup("<kbd>", Format.duration(test.getDuration()), "</kbd>")
            .line();
        }
    });
%>

<sub>Generated by [Test Reports Plugin](https://github.com/newty-coffee/test-reports-plugin) for Gradle</sub>
